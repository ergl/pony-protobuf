use "files"
use "buffered"
use "debug"

use ".."

primitive CodeGen
  fun apply(request: CodeGeneratorRequest): CodeGeneratorResponse =>
    let protoc_version_str = _build_protoc_version(request.compiler_version)
    let resp: CodeGeneratorResponse = CodeGeneratorResponse

    resp.supported_features = U64(0)
    resp.file =
      Array[CodeGeneratorResponseFile](request.file_to_generate.size())

    var dependencies = request.proto_file
    for file_name in request.file_to_generate.values() do
      match _codegen_proto_file(file_name, dependencies, protoc_version_str)
      | let gen: CodeGeneratorResponseFile =>
        resp.file.push(gen)
      | let error_reason: String =>
        resp.field_error = error_reason
        return resp
      end
    end
    resp

  fun _build_protoc_version(maybe_version: (Version | None)): String =>
    match maybe_version
    | None => ""
    | let version: Version =>
      let str = recover String.create(6) end
      match version.major
      | None => None
      | let major: I32 => str.>append(major.string()).append(".")
      end
      match version.minor
      | None => None
      | let minor: I32 => str.>append(minor.string()).append(".")
      end
      match version.patch
      | None => None
      | let patch: I32 => str.append(patch.string())
      end
      match version.suffix
      | let suffix: String if suffix.size() > 0 =>
        str.>append(".").append(suffix)
      else
        None
      end
      consume str
    end

  fun _codegen_proto_file(
    file_path: String,
    proto_descriptors: Array[FileDescriptorProto],
    protoc_version: String)
    : (CodeGeneratorResponseFile | String)
  =>
    let response_file: CodeGeneratorResponseFile = CodeGeneratorResponseFile
    let file_name = Path.normcase(Path.base(file_path where with_ext = false))
    response_file.name = file_name + ".pony"
    // Debug.err("Have to generate: " + file_name)

    var offset: USize = 0
    for descriptor in proto_descriptors.values() do
      match descriptor.name
      | let dscr_file_name: String =>
        let normalized = Path.normcase(
          Path.base(dscr_file_name where with_ext = false)
        )
        // If they're not the same, they're a dependency, skip for now
        if (normalized == file_name) then
          match descriptor.syntax
          | "proto3" =>
            return "pony-protobuf only supports proto2 files"
          else
            response_file.content =
              _codegen_proto_descriptor(protoc_version, descriptor)
          end
        end
      else
        None
      end
      offset = offset + 1
    end

    response_file

  fun _codegen_proto_descriptor(
    protoc_version: String,
    descriptor: FileDescriptorProto)
    : String
  =>
    for d in descriptor.dependency.values() do
      Debug.err("Depends on " + d)
    end
    for idx in descriptor.public_dependency.values() do
      Debug.err("Idx of dep: " + idx.string())
    end
    recover
      String
        .> append("// This file was autogenerated by pony-protobuf ")
        .> append(PluginVersion())
        .> append(". Do not edit!\n")
        .> append("// Compiled by protoc ")
        .> append(protoc_version) .> append("\n")
    end
    // let resp_file: CodeGeneratorResponseFile = CodeGeneratorResponseFile
    // resp_file.name = Path.normcase(Path.base(file_name where with_ext = false) + ".pony")
    // resp_file.content = "Hello! This is the pony protogen compiler :^)"
    // resp.file.push(resp_file)
