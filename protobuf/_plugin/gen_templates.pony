use "templates"

class val GenTemplate
  let header: Template
  let enum_field: Template
  let enum_alias: Template
  let enum_builder: Template
  let message_structure: Template
  let write_bytes: Template
  let write_enum: Template
  let write_varint: Template
  let write_varint_zigzag: Template
  let write_repeated_varint: Template
  let write_repeated_varint_zigzag: Template
  let write_packed_varint: Template
  let write_inner_message: Template
  let write_repeated_inner_message: Template
  let initialized_simple_clause: Template
  let initialized_repeated_clause: Template

  new val create() ? =>
    header = Template.parse(
      """
      // This file was autogenerated by pony-protobuf {{vsn}}. Do not edit!
      // Compiled by protoc {{protoc_version}}

      use "protobuf"

      """
    )?

    enum_field = Template.parse(
      """
      primitive {{name}} is ProtoEnumValue
        fun as_i32(): I32 => {{value}}

      """
    )?

    enum_alias = Template.parse(
      """
      type {{name}} is (
        {{first_alias}}{{ifnotempty rest_alias}}{{for x in rest_alias}}
        | {{x}}{{end}}{{end}}
      )

      """
    )?

    enum_builder = Template.parse(
      """
      primitive {{name}} is ProtoEnum
        fun from_i32(value: I32): ({{enum_type}} | None) =>
          match value{{for x in match_clauses }}
          | {{x.value}} => {{x.name}}{{end}}
          else
            None
          end

      """
    )?

    message_structure = Template.parse(
      """
      class {{name}} is ProtoMessage{{ifnotempty fields}}{{for field in fields}}
        var {{field.name}}: {{field.f_type}} = {{field.default}}{{end}}{{end}}

        {{ifnotempty initializer_clauses}}
        fun is_initialized(): Bool =>
          {{for clause in initializer_clauses}}
          {{clause}}{{end}}
          true{{end}}

        {{ifnotempty field_size_clauses}}
        fun compute_size(): U32 =>
          var size: U32 = 0{{for clause in field_size_clauses}}
          {{clause}}{{end}}
          size{{end}}

        {{ifnotempty read_clauses}}
        fun ref parse_from_stream(reader: ProtoReader) ? =>
          while reader.size() > 0
            match reader.read_field_tag()?{{for clause in read_clauses}}
            {{clause}}{{end}}
            | (_, let typ: TagKind) => reader.skip_field(typ)?
            end
          end{{end}}

        {{ifnotempty write_clauses}}
        fun write_to_stream(writer: ProtoWriter) =>
          {{for clause in write_clauses}}
          {{clause}}{{end}}{{end}}
      """
    )?

    write_bytes = Template.parse(
      """
      writer.write_tag({{number}}, DelimitedField)
      writer.write_bytes({{field}})
      """
    )?

    write_enum = Template.parse(
      """
      writer.write_tag({{number}}, VarintField)
      writer.write_enum({{field}})
      """
    )?

    write_varint = Template.parse(
      """
      writer.write_tag({{number}}, VarintField)
      writer.write_varint[{{type}}]({{field}})
      """
    )?

    write_varint_zigzag = Template.parse(
      """
      writer.write_tag({{number}}, VarintField)
      writer.write_varint_zigzag[{{type}}]({{field}})
      """
    )?

    write_repeated_varint = Template.parse(
      """
      for v in {{field}}.values() do
        writer.write_tag({{number}}, VarintField)
        writer.write_varint[{{type}}](v)
      end
      """
    )?

    write_repeated_varint_zigzag = Template.parse(
      """
      for v in {{field}}.values() do
        writer.write_tag({{number}}, VarintField)
        writer.write_varint_zigzag[{{type}}](v)
      end
      """
    )?

    write_packed_varint = Template.parse(
      """
      if {{field}}.size() != 0 then
        var {{field}}_size: U32 = 0
        for v in {{field}}.values() do
          {{field}}_size = {{field}}_size + FieldSize.raw_varint(v.u64())
        end
        writer.write_tag({{number}}, DelimitedField)
        writer.write_packed_varint[{{type}}]({{field}}, {{field}}_size)
      end
      """
    )?

    write_inner_message = Template.parse(
      """
      writer.write_tag({{number}}, DelimitedField)
      writer.write_varint[U32]({{field}}.compute_size())
      {{field}}.write_to_stream(writer)
      """
    )?

    write_repeated_inner_message = Template.parse(
      """
      for v in {{field}}.values() do
        writer.write_tag({{number}}, DelimitedField)
        writer.write_varint[U32](v.compute_size())
        v.write_to_stream(writer)
      end
      """
    )?

    initialized_simple_clause = Template.parse(
      """
      if {{name}} is None then
        return false
      end
      """
    )?

    initialized_repeated_clause = Template.parse(
      """
      for v in {{name}}.values() do
        if not v.is_initialized() then
          return false
        end
      end
      """
    )?
