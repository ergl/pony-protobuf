use "templates"

class val GenTemplate
  let header: Template
  let enum_field: Template
  let enum_alias: Template
  let enum_builder: Template

  new val create() ? =>
    header = Template.parse(
      """
      // This file was autogenerated by pony-protobuf {{vsn}}. Do not edit!
      // Compiled by protoc {{protoc_version}}

      use "protobuf"

      """
    )?

    enum_field = Template.parse(
      """
      primitive {{name}} is ProtoEnumValue
        fun as_i32(): I32 => {{value}}

      """
    )?

    enum_alias = Template.parse(
      """
      type {{name}} is (
        {{first_alias}}{{ifnotempty rest_alias}}{{for x in rest_alias}}
        | {{x}}{{end}}{{end}}
      )

      """
    )?

    enum_builder = Template.parse(
      """
      primitive {{name}} is ProtoEnum
        fun from_i32(value: I32): ({{enum_type}} | None) =>
          match value{{for x in match_clauses }}
          | {{x.value}} => {{x.name}}{{end}}
          else
            None
          end

      """
    )?
