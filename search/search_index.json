{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages protobuf","title":"protobuf"},{"location":"protobuf--index/","text":"No package doc string provided for protobuf. Public Types \u00b6 primitive ZigZag class ProtoWriter class ProtoReader trait ProtoMessage trait ProtoEnumValue trait ProtoEnum primitive VarintField primitive Fixed32Field primitive Fixed64Field primitive DelimitedField type TagKind primitive FieldSize","title":"Package"},{"location":"protobuf--index/#public-types","text":"primitive ZigZag class ProtoWriter class ProtoReader trait ProtoMessage trait ProtoEnumValue trait ProtoEnum primitive VarintField primitive Fixed32Field primitive Fixed64Field primitive DelimitedField type TagKind primitive FieldSize","title":"Public Types"},{"location":"protobuf-DelimitedField/","text":"DelimitedField \u00b6 [Source] primitive val DelimitedField Constructors \u00b6 create \u00b6 [Source] new val create() : DelimitedField val^ Returns \u00b6 DelimitedField val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: DelimitedField val) : Bool val Parameters \u00b6 that: DelimitedField val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: DelimitedField val) : Bool val Parameters \u00b6 that: DelimitedField val Returns \u00b6 Bool val","title":"primitive DelimitedField"},{"location":"protobuf-DelimitedField/#delimitedfield","text":"[Source] primitive val DelimitedField","title":"DelimitedField"},{"location":"protobuf-DelimitedField/#constructors","text":"","title":"Constructors"},{"location":"protobuf-DelimitedField/#create","text":"[Source] new val create() : DelimitedField val^","title":"create"},{"location":"protobuf-DelimitedField/#returns","text":"DelimitedField val^","title":"Returns"},{"location":"protobuf-DelimitedField/#public-functions","text":"","title":"Public Functions"},{"location":"protobuf-DelimitedField/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"protobuf-DelimitedField/#returns_1","text":"String val","title":"Returns"},{"location":"protobuf-DelimitedField/#eq","text":"[Source] fun box eq( that: DelimitedField val) : Bool val","title":"eq"},{"location":"protobuf-DelimitedField/#parameters","text":"that: DelimitedField val","title":"Parameters"},{"location":"protobuf-DelimitedField/#returns_2","text":"Bool val","title":"Returns"},{"location":"protobuf-DelimitedField/#ne","text":"[Source] fun box ne( that: DelimitedField val) : Bool val","title":"ne"},{"location":"protobuf-DelimitedField/#parameters_1","text":"that: DelimitedField val","title":"Parameters"},{"location":"protobuf-DelimitedField/#returns_3","text":"Bool val","title":"Returns"},{"location":"protobuf-FieldSize/","text":"FieldSize \u00b6 [Source] primitive val FieldSize Constructors \u00b6 create \u00b6 [Source] new val create() : FieldSize val^ Returns \u00b6 FieldSize val^ Public Functions \u00b6 varint[T: ( I32 val | I64 val | U32 val | U64 val | Bool val)] \u00b6 [Source] fun box varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]( field: U64 val, n: T) : U32 val Parameters \u00b6 field: U64 val n: T Returns \u00b6 U32 val varint_zigzag[T: ( I32 val | I64 val)] \u00b6 [Source] fun box varint_zigzag[T: (I32 val | I64 val)]( field: U64 val, n: T) : U32 val Parameters \u00b6 field: U64 val n: T Returns \u00b6 U32 val enum \u00b6 [Source] fun box enum( field: U64 val, enum_field: ProtoEnumValue val) : U32 val Parameters \u00b6 field: U64 val enum_field: ProtoEnumValue val Returns \u00b6 U32 val fixed32 \u00b6 [Source] fun box fixed32( field: U64 val) : U32 val Parameters \u00b6 field: U64 val Returns \u00b6 U32 val fixed64 \u00b6 [Source] fun box fixed64( field: U64 val) : U32 val Parameters \u00b6 field: U64 val Returns \u00b6 U32 val delimited \u00b6 [Source] fun box delimited( field: U64 val, bytes: (String box | Array[U8 val] box)) : U32 val Parameters \u00b6 field: U64 val bytes: ( String box | Array [ U8 val] box) Returns \u00b6 U32 val inner_message \u00b6 [Source] fun box inner_message( field: U64 val, n: ProtoMessage box) : U32 val Parameters \u00b6 field: U64 val n: ProtoMessage box Returns \u00b6 U32 val packed_varint[T: ( I32 val | I64 val | U32 val | U64 val | Bool val)] \u00b6 [Source] fun box packed_varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]( field: U64 val, arg: Array[T] box) : U32 val Parameters \u00b6 field: U64 val arg: Array [T] box Returns \u00b6 U32 val packed_varint_zigzag[T: ( I32 val | I64 val)] \u00b6 [Source] fun box packed_varint_zigzag[T: (I32 val | I64 val)]( field: U64 val, arg: Array[T] box) : U32 val Parameters \u00b6 field: U64 val arg: Array [T] box Returns \u00b6 U32 val packed_fixed32[T: ( I32 val | U32 val | F32 val)] \u00b6 [Source] fun box packed_fixed32[T: (I32 val | U32 val | F32 val)]( field: U64 val, arg: Array[T] box) : U32 val Parameters \u00b6 field: U64 val arg: Array [T] box Returns \u00b6 U32 val packed_fixed64[T: ( I64 val | U64 val | F64 val)] \u00b6 [Source] fun box packed_fixed64[T: (I64 val | U64 val | F64 val)]( field: U64 val, arg: Array[T] box) : U32 val Parameters \u00b6 field: U64 val arg: Array [T] box Returns \u00b6 U32 val packed_enum[T: ProtoEnumValue val] \u00b6 [Source] fun box packed_enum[T: ProtoEnumValue val]( field: U64 val, arg: Array[T] box) : U32 val Parameters \u00b6 field: U64 val arg: Array [T] box Returns \u00b6 U32 val packed_enum_size \u00b6 [Source] fun box packed_enum_size( field: U64 val, arg: Array[ProtoEnumValue val] box) : U32 val Parameters \u00b6 field: U64 val arg: Array [ ProtoEnumValue val] box Returns \u00b6 U32 val raw_varint \u00b6 [Source] fun box raw_varint( v: U64 val) : U32 val Parameters \u00b6 v: U64 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FieldSize val) : Bool val Parameters \u00b6 that: FieldSize val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FieldSize val) : Bool val Parameters \u00b6 that: FieldSize val Returns \u00b6 Bool val","title":"primitive FieldSize"},{"location":"protobuf-FieldSize/#fieldsize","text":"[Source] primitive val FieldSize","title":"FieldSize"},{"location":"protobuf-FieldSize/#constructors","text":"","title":"Constructors"},{"location":"protobuf-FieldSize/#create","text":"[Source] new val create() : FieldSize val^","title":"create"},{"location":"protobuf-FieldSize/#returns","text":"FieldSize val^","title":"Returns"},{"location":"protobuf-FieldSize/#public-functions","text":"","title":"Public Functions"},{"location":"protobuf-FieldSize/#varintt-i32-val-i64-val-u32-val-u64-val-bool-val","text":"[Source] fun box varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]( field: U64 val, n: T) : U32 val","title":"varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]"},{"location":"protobuf-FieldSize/#parameters","text":"field: U64 val n: T","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_1","text":"U32 val","title":"Returns"},{"location":"protobuf-FieldSize/#varint_zigzagt-i32-val-i64-val","text":"[Source] fun box varint_zigzag[T: (I32 val | I64 val)]( field: U64 val, n: T) : U32 val","title":"varint_zigzag[T: (I32 val | I64 val)]"},{"location":"protobuf-FieldSize/#parameters_1","text":"field: U64 val n: T","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_2","text":"U32 val","title":"Returns"},{"location":"protobuf-FieldSize/#enum","text":"[Source] fun box enum( field: U64 val, enum_field: ProtoEnumValue val) : U32 val","title":"enum"},{"location":"protobuf-FieldSize/#parameters_2","text":"field: U64 val enum_field: ProtoEnumValue val","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_3","text":"U32 val","title":"Returns"},{"location":"protobuf-FieldSize/#fixed32","text":"[Source] fun box fixed32( field: U64 val) : U32 val","title":"fixed32"},{"location":"protobuf-FieldSize/#parameters_3","text":"field: U64 val","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_4","text":"U32 val","title":"Returns"},{"location":"protobuf-FieldSize/#fixed64","text":"[Source] fun box fixed64( field: U64 val) : U32 val","title":"fixed64"},{"location":"protobuf-FieldSize/#parameters_4","text":"field: U64 val","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_5","text":"U32 val","title":"Returns"},{"location":"protobuf-FieldSize/#delimited","text":"[Source] fun box delimited( field: U64 val, bytes: (String box | Array[U8 val] box)) : U32 val","title":"delimited"},{"location":"protobuf-FieldSize/#parameters_5","text":"field: U64 val bytes: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_6","text":"U32 val","title":"Returns"},{"location":"protobuf-FieldSize/#inner_message","text":"[Source] fun box inner_message( field: U64 val, n: ProtoMessage box) : U32 val","title":"inner_message"},{"location":"protobuf-FieldSize/#parameters_6","text":"field: U64 val n: ProtoMessage box","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_7","text":"U32 val","title":"Returns"},{"location":"protobuf-FieldSize/#packed_varintt-i32-val-i64-val-u32-val-u64-val-bool-val","text":"[Source] fun box packed_varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]( field: U64 val, arg: Array[T] box) : U32 val","title":"packed_varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]"},{"location":"protobuf-FieldSize/#parameters_7","text":"field: U64 val arg: Array [T] box","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_8","text":"U32 val","title":"Returns"},{"location":"protobuf-FieldSize/#packed_varint_zigzagt-i32-val-i64-val","text":"[Source] fun box packed_varint_zigzag[T: (I32 val | I64 val)]( field: U64 val, arg: Array[T] box) : U32 val","title":"packed_varint_zigzag[T: (I32 val | I64 val)]"},{"location":"protobuf-FieldSize/#parameters_8","text":"field: U64 val arg: Array [T] box","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_9","text":"U32 val","title":"Returns"},{"location":"protobuf-FieldSize/#packed_fixed32t-i32-val-u32-val-f32-val","text":"[Source] fun box packed_fixed32[T: (I32 val | U32 val | F32 val)]( field: U64 val, arg: Array[T] box) : U32 val","title":"packed_fixed32[T: (I32 val | U32 val | F32 val)]"},{"location":"protobuf-FieldSize/#parameters_9","text":"field: U64 val arg: Array [T] box","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_10","text":"U32 val","title":"Returns"},{"location":"protobuf-FieldSize/#packed_fixed64t-i64-val-u64-val-f64-val","text":"[Source] fun box packed_fixed64[T: (I64 val | U64 val | F64 val)]( field: U64 val, arg: Array[T] box) : U32 val","title":"packed_fixed64[T: (I64 val | U64 val | F64 val)]"},{"location":"protobuf-FieldSize/#parameters_10","text":"field: U64 val arg: Array [T] box","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_11","text":"U32 val","title":"Returns"},{"location":"protobuf-FieldSize/#packed_enumt-protoenumvalue-val","text":"[Source] fun box packed_enum[T: ProtoEnumValue val]( field: U64 val, arg: Array[T] box) : U32 val","title":"packed_enum[T: ProtoEnumValue val]"},{"location":"protobuf-FieldSize/#parameters_11","text":"field: U64 val arg: Array [T] box","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_12","text":"U32 val","title":"Returns"},{"location":"protobuf-FieldSize/#packed_enum_size","text":"[Source] fun box packed_enum_size( field: U64 val, arg: Array[ProtoEnumValue val] box) : U32 val","title":"packed_enum_size"},{"location":"protobuf-FieldSize/#parameters_12","text":"field: U64 val arg: Array [ ProtoEnumValue val] box","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_13","text":"U32 val","title":"Returns"},{"location":"protobuf-FieldSize/#raw_varint","text":"[Source] fun box raw_varint( v: U64 val) : U32 val","title":"raw_varint"},{"location":"protobuf-FieldSize/#parameters_13","text":"v: U64 val","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_14","text":"U32 val","title":"Returns"},{"location":"protobuf-FieldSize/#eq","text":"[Source] fun box eq( that: FieldSize val) : Bool val","title":"eq"},{"location":"protobuf-FieldSize/#parameters_14","text":"that: FieldSize val","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_15","text":"Bool val","title":"Returns"},{"location":"protobuf-FieldSize/#ne","text":"[Source] fun box ne( that: FieldSize val) : Bool val","title":"ne"},{"location":"protobuf-FieldSize/#parameters_15","text":"that: FieldSize val","title":"Parameters"},{"location":"protobuf-FieldSize/#returns_16","text":"Bool val","title":"Returns"},{"location":"protobuf-Fixed32Field/","text":"Fixed32Field \u00b6 [Source] primitive val Fixed32Field Constructors \u00b6 create \u00b6 [Source] new val create() : Fixed32Field val^ Returns \u00b6 Fixed32Field val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: Fixed32Field val) : Bool val Parameters \u00b6 that: Fixed32Field val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Fixed32Field val) : Bool val Parameters \u00b6 that: Fixed32Field val Returns \u00b6 Bool val","title":"primitive Fixed32Field"},{"location":"protobuf-Fixed32Field/#fixed32field","text":"[Source] primitive val Fixed32Field","title":"Fixed32Field"},{"location":"protobuf-Fixed32Field/#constructors","text":"","title":"Constructors"},{"location":"protobuf-Fixed32Field/#create","text":"[Source] new val create() : Fixed32Field val^","title":"create"},{"location":"protobuf-Fixed32Field/#returns","text":"Fixed32Field val^","title":"Returns"},{"location":"protobuf-Fixed32Field/#public-functions","text":"","title":"Public Functions"},{"location":"protobuf-Fixed32Field/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"protobuf-Fixed32Field/#returns_1","text":"String val","title":"Returns"},{"location":"protobuf-Fixed32Field/#eq","text":"[Source] fun box eq( that: Fixed32Field val) : Bool val","title":"eq"},{"location":"protobuf-Fixed32Field/#parameters","text":"that: Fixed32Field val","title":"Parameters"},{"location":"protobuf-Fixed32Field/#returns_2","text":"Bool val","title":"Returns"},{"location":"protobuf-Fixed32Field/#ne","text":"[Source] fun box ne( that: Fixed32Field val) : Bool val","title":"ne"},{"location":"protobuf-Fixed32Field/#parameters_1","text":"that: Fixed32Field val","title":"Parameters"},{"location":"protobuf-Fixed32Field/#returns_3","text":"Bool val","title":"Returns"},{"location":"protobuf-Fixed64Field/","text":"Fixed64Field \u00b6 [Source] primitive val Fixed64Field Constructors \u00b6 create \u00b6 [Source] new val create() : Fixed64Field val^ Returns \u00b6 Fixed64Field val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: Fixed64Field val) : Bool val Parameters \u00b6 that: Fixed64Field val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Fixed64Field val) : Bool val Parameters \u00b6 that: Fixed64Field val Returns \u00b6 Bool val","title":"primitive Fixed64Field"},{"location":"protobuf-Fixed64Field/#fixed64field","text":"[Source] primitive val Fixed64Field","title":"Fixed64Field"},{"location":"protobuf-Fixed64Field/#constructors","text":"","title":"Constructors"},{"location":"protobuf-Fixed64Field/#create","text":"[Source] new val create() : Fixed64Field val^","title":"create"},{"location":"protobuf-Fixed64Field/#returns","text":"Fixed64Field val^","title":"Returns"},{"location":"protobuf-Fixed64Field/#public-functions","text":"","title":"Public Functions"},{"location":"protobuf-Fixed64Field/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"protobuf-Fixed64Field/#returns_1","text":"String val","title":"Returns"},{"location":"protobuf-Fixed64Field/#eq","text":"[Source] fun box eq( that: Fixed64Field val) : Bool val","title":"eq"},{"location":"protobuf-Fixed64Field/#parameters","text":"that: Fixed64Field val","title":"Parameters"},{"location":"protobuf-Fixed64Field/#returns_2","text":"Bool val","title":"Returns"},{"location":"protobuf-Fixed64Field/#ne","text":"[Source] fun box ne( that: Fixed64Field val) : Bool val","title":"ne"},{"location":"protobuf-Fixed64Field/#parameters_1","text":"that: Fixed64Field val","title":"Parameters"},{"location":"protobuf-Fixed64Field/#returns_3","text":"Bool val","title":"Returns"},{"location":"protobuf-ProtoEnum/","text":"ProtoEnum \u00b6 [Source] trait val ProtoEnum Public Functions \u00b6 from_i32 \u00b6 [Source] fun box from_i32( value: I32 val) : (ProtoEnumValue val | None val) Parameters \u00b6 value: I32 val Returns \u00b6 ( ProtoEnumValue val | None val)","title":"trait ProtoEnum"},{"location":"protobuf-ProtoEnum/#protoenum","text":"[Source] trait val ProtoEnum","title":"ProtoEnum"},{"location":"protobuf-ProtoEnum/#public-functions","text":"","title":"Public Functions"},{"location":"protobuf-ProtoEnum/#from_i32","text":"[Source] fun box from_i32( value: I32 val) : (ProtoEnumValue val | None val)","title":"from_i32"},{"location":"protobuf-ProtoEnum/#parameters","text":"value: I32 val","title":"Parameters"},{"location":"protobuf-ProtoEnum/#returns","text":"( ProtoEnumValue val | None val)","title":"Returns"},{"location":"protobuf-ProtoEnumValue/","text":"ProtoEnumValue \u00b6 [Source] trait val ProtoEnumValue Public Functions \u00b6 as_i32 \u00b6 [Source] fun box as_i32() : I32 val Returns \u00b6 I32 val","title":"trait ProtoEnumValue"},{"location":"protobuf-ProtoEnumValue/#protoenumvalue","text":"[Source] trait val ProtoEnumValue","title":"ProtoEnumValue"},{"location":"protobuf-ProtoEnumValue/#public-functions","text":"","title":"Public Functions"},{"location":"protobuf-ProtoEnumValue/#as_i32","text":"[Source] fun box as_i32() : I32 val","title":"as_i32"},{"location":"protobuf-ProtoEnumValue/#returns","text":"I32 val","title":"Returns"},{"location":"protobuf-ProtoMessage/","text":"ProtoMessage \u00b6 [Source] trait ref ProtoMessage Public Functions \u00b6 is_initialized \u00b6 [Source] fun box is_initialized() : Bool val Returns \u00b6 Bool val compute_size \u00b6 [Source] fun box compute_size() : U32 val Returns \u00b6 U32 val write_to_stream \u00b6 [Source] fun box write_to_stream( writer: ProtoWriter ref) : None val Parameters \u00b6 writer: ProtoWriter ref Returns \u00b6 None val parse_from_stream \u00b6 [Source] fun ref parse_from_stream( reader: ProtoReader ref) : None val ? Parameters \u00b6 reader: ProtoReader ref Returns \u00b6 None val ?","title":"trait ProtoMessage"},{"location":"protobuf-ProtoMessage/#protomessage","text":"[Source] trait ref ProtoMessage","title":"ProtoMessage"},{"location":"protobuf-ProtoMessage/#public-functions","text":"","title":"Public Functions"},{"location":"protobuf-ProtoMessage/#is_initialized","text":"[Source] fun box is_initialized() : Bool val","title":"is_initialized"},{"location":"protobuf-ProtoMessage/#returns","text":"Bool val","title":"Returns"},{"location":"protobuf-ProtoMessage/#compute_size","text":"[Source] fun box compute_size() : U32 val","title":"compute_size"},{"location":"protobuf-ProtoMessage/#returns_1","text":"U32 val","title":"Returns"},{"location":"protobuf-ProtoMessage/#write_to_stream","text":"[Source] fun box write_to_stream( writer: ProtoWriter ref) : None val","title":"write_to_stream"},{"location":"protobuf-ProtoMessage/#parameters","text":"writer: ProtoWriter ref","title":"Parameters"},{"location":"protobuf-ProtoMessage/#returns_2","text":"None val","title":"Returns"},{"location":"protobuf-ProtoMessage/#parse_from_stream","text":"[Source] fun ref parse_from_stream( reader: ProtoReader ref) : None val ?","title":"parse_from_stream"},{"location":"protobuf-ProtoMessage/#parameters_1","text":"reader: ProtoReader ref","title":"Parameters"},{"location":"protobuf-ProtoMessage/#returns_3","text":"None val ?","title":"Returns"},{"location":"protobuf-ProtoReader/","text":"ProtoReader \u00b6 [Source] class ref ProtoReader Constructors \u00b6 create \u00b6 [Source] new ref create() : ProtoReader ref^ Returns \u00b6 ProtoReader ref^ Public Functions \u00b6 size \u00b6 [Source] fun box size() : USize val Returns \u00b6 USize val pop_embed \u00b6 [Source] fun ref pop_embed() : ProtoReader ref ? Returns \u00b6 ProtoReader ref ? block \u00b6 [Source] fun ref block( slice_size: USize val) : ProtoReader ref ? Parameters \u00b6 slice_size: USize val Returns \u00b6 ProtoReader ref ? read_field_tag \u00b6 [Source] fun ref read_field_tag() : (U64 val , (VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val)) ? Returns \u00b6 ( U64 val , ( VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val)) ? read_varint_bool \u00b6 [Source] fun ref read_varint_bool() : Bool val ? Returns \u00b6 Bool val ? read_varint_32 \u00b6 [Source] fun ref read_varint_32() : U32 val ? Returns \u00b6 U32 val ? read_varint_64 \u00b6 [Source] fun ref read_varint_64() : U64 val ? Returns \u00b6 U64 val ? read_varint_zigzag_32 \u00b6 [Source] fun ref read_varint_zigzag_32() : I32 val ? Returns \u00b6 I32 val ? read_varint_zigzag_64 \u00b6 [Source] fun ref read_varint_zigzag_64() : I64 val ? Returns \u00b6 I64 val ? read_fixed_32_integer \u00b6 [Source] fun ref read_fixed_32_integer() : U32 val ? Returns \u00b6 U32 val ? read_fixed_32_float \u00b6 [Source] fun ref read_fixed_32_float() : F32 val ? Returns \u00b6 F32 val ? read_fixed_64_integer \u00b6 [Source] fun ref read_fixed_64_integer() : U64 val ? Returns \u00b6 U64 val ? read_fixed_64_float \u00b6 [Source] fun ref read_fixed_64_float() : F64 val ? Returns \u00b6 F64 val ? read_packed_varint[T: ( I32 val | I64 val | U32 val | U64 val | Bool val)] \u00b6 [Source] fun ref read_packed_varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]( into: Array[T] ref) : None val ? Parameters \u00b6 into: Array [T] ref Returns \u00b6 None val ? read_packed_varint_zigzag[T: ( I32 val | I64 val)] \u00b6 [Source] fun ref read_packed_varint_zigzag[T: (I32 val | I64 val)]( into: Array[T] ref) : None val ? Parameters \u00b6 into: Array [T] ref Returns \u00b6 None val ? read_packed_fixed_32[T: ( U32 val | I32 val | F32 val)] \u00b6 [Source] fun ref read_packed_fixed_32[T: (U32 val | I32 val | F32 val)]( into: Array[T] ref) : None val ? Parameters \u00b6 into: Array [T] ref Returns \u00b6 None val ? read_packed_fixed_64[T: ( U64 val | I64 val | F64 val)] \u00b6 [Source] fun ref read_packed_fixed_64[T: (U64 val | I64 val | F64 val)]( into: Array[T] ref) : None val ? Parameters \u00b6 into: Array [T] ref Returns \u00b6 None val ? read_packed_enum[T: ProtoEnumValue val] \u00b6 [Source] fun ref read_packed_enum[T: ProtoEnumValue val]( into: Array[T] ref, builder: ProtoEnum val) : None val ? Parameters \u00b6 into: Array [T] ref builder: ProtoEnum val Returns \u00b6 None val ? read_bytes \u00b6 [Source] fun ref read_bytes() : Array[U8 val] iso^ ? Returns \u00b6 Array [ U8 val] iso^ ? read_string \u00b6 [Source] fun ref read_string() : String iso^ ? Returns \u00b6 String iso^ ? read_raw_delimited_length \u00b6 [Source] fun ref read_raw_delimited_length() : USize val ? Returns \u00b6 USize val ? skip_field \u00b6 [Source] fun ref skip_field( field_tag: (VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val)) : None val ? Parameters \u00b6 field_tag: ( VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val) Returns \u00b6 None val ? skip_raw \u00b6 [Source] fun ref skip_raw( to_skip: USize val) : None val ? Parameters \u00b6 to_skip: USize val Returns \u00b6 None val ? append \u00b6 [Source] fun ref append( data: (String val | Array[U8 val] val)) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) Returns \u00b6 None val","title":"class ProtoReader"},{"location":"protobuf-ProtoReader/#protoreader","text":"[Source] class ref ProtoReader","title":"ProtoReader"},{"location":"protobuf-ProtoReader/#constructors","text":"","title":"Constructors"},{"location":"protobuf-ProtoReader/#create","text":"[Source] new ref create() : ProtoReader ref^","title":"create"},{"location":"protobuf-ProtoReader/#returns","text":"ProtoReader ref^","title":"Returns"},{"location":"protobuf-ProtoReader/#public-functions","text":"","title":"Public Functions"},{"location":"protobuf-ProtoReader/#size","text":"[Source] fun box size() : USize val","title":"size"},{"location":"protobuf-ProtoReader/#returns_1","text":"USize val","title":"Returns"},{"location":"protobuf-ProtoReader/#pop_embed","text":"[Source] fun ref pop_embed() : ProtoReader ref ?","title":"pop_embed"},{"location":"protobuf-ProtoReader/#returns_2","text":"ProtoReader ref ?","title":"Returns"},{"location":"protobuf-ProtoReader/#block","text":"[Source] fun ref block( slice_size: USize val) : ProtoReader ref ?","title":"block"},{"location":"protobuf-ProtoReader/#parameters","text":"slice_size: USize val","title":"Parameters"},{"location":"protobuf-ProtoReader/#returns_3","text":"ProtoReader ref ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_field_tag","text":"[Source] fun ref read_field_tag() : (U64 val , (VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val)) ?","title":"read_field_tag"},{"location":"protobuf-ProtoReader/#returns_4","text":"( U64 val , ( VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val)) ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_varint_bool","text":"[Source] fun ref read_varint_bool() : Bool val ?","title":"read_varint_bool"},{"location":"protobuf-ProtoReader/#returns_5","text":"Bool val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_varint_32","text":"[Source] fun ref read_varint_32() : U32 val ?","title":"read_varint_32"},{"location":"protobuf-ProtoReader/#returns_6","text":"U32 val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_varint_64","text":"[Source] fun ref read_varint_64() : U64 val ?","title":"read_varint_64"},{"location":"protobuf-ProtoReader/#returns_7","text":"U64 val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_varint_zigzag_32","text":"[Source] fun ref read_varint_zigzag_32() : I32 val ?","title":"read_varint_zigzag_32"},{"location":"protobuf-ProtoReader/#returns_8","text":"I32 val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_varint_zigzag_64","text":"[Source] fun ref read_varint_zigzag_64() : I64 val ?","title":"read_varint_zigzag_64"},{"location":"protobuf-ProtoReader/#returns_9","text":"I64 val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_fixed_32_integer","text":"[Source] fun ref read_fixed_32_integer() : U32 val ?","title":"read_fixed_32_integer"},{"location":"protobuf-ProtoReader/#returns_10","text":"U32 val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_fixed_32_float","text":"[Source] fun ref read_fixed_32_float() : F32 val ?","title":"read_fixed_32_float"},{"location":"protobuf-ProtoReader/#returns_11","text":"F32 val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_fixed_64_integer","text":"[Source] fun ref read_fixed_64_integer() : U64 val ?","title":"read_fixed_64_integer"},{"location":"protobuf-ProtoReader/#returns_12","text":"U64 val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_fixed_64_float","text":"[Source] fun ref read_fixed_64_float() : F64 val ?","title":"read_fixed_64_float"},{"location":"protobuf-ProtoReader/#returns_13","text":"F64 val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_packed_varintt-i32-val-i64-val-u32-val-u64-val-bool-val","text":"[Source] fun ref read_packed_varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]( into: Array[T] ref) : None val ?","title":"read_packed_varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]"},{"location":"protobuf-ProtoReader/#parameters_1","text":"into: Array [T] ref","title":"Parameters"},{"location":"protobuf-ProtoReader/#returns_14","text":"None val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_packed_varint_zigzagt-i32-val-i64-val","text":"[Source] fun ref read_packed_varint_zigzag[T: (I32 val | I64 val)]( into: Array[T] ref) : None val ?","title":"read_packed_varint_zigzag[T: (I32 val | I64 val)]"},{"location":"protobuf-ProtoReader/#parameters_2","text":"into: Array [T] ref","title":"Parameters"},{"location":"protobuf-ProtoReader/#returns_15","text":"None val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_packed_fixed_32t-u32-val-i32-val-f32-val","text":"[Source] fun ref read_packed_fixed_32[T: (U32 val | I32 val | F32 val)]( into: Array[T] ref) : None val ?","title":"read_packed_fixed_32[T: (U32 val | I32 val | F32 val)]"},{"location":"protobuf-ProtoReader/#parameters_3","text":"into: Array [T] ref","title":"Parameters"},{"location":"protobuf-ProtoReader/#returns_16","text":"None val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_packed_fixed_64t-u64-val-i64-val-f64-val","text":"[Source] fun ref read_packed_fixed_64[T: (U64 val | I64 val | F64 val)]( into: Array[T] ref) : None val ?","title":"read_packed_fixed_64[T: (U64 val | I64 val | F64 val)]"},{"location":"protobuf-ProtoReader/#parameters_4","text":"into: Array [T] ref","title":"Parameters"},{"location":"protobuf-ProtoReader/#returns_17","text":"None val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_packed_enumt-protoenumvalue-val","text":"[Source] fun ref read_packed_enum[T: ProtoEnumValue val]( into: Array[T] ref, builder: ProtoEnum val) : None val ?","title":"read_packed_enum[T: ProtoEnumValue val]"},{"location":"protobuf-ProtoReader/#parameters_5","text":"into: Array [T] ref builder: ProtoEnum val","title":"Parameters"},{"location":"protobuf-ProtoReader/#returns_18","text":"None val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_bytes","text":"[Source] fun ref read_bytes() : Array[U8 val] iso^ ?","title":"read_bytes"},{"location":"protobuf-ProtoReader/#returns_19","text":"Array [ U8 val] iso^ ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_string","text":"[Source] fun ref read_string() : String iso^ ?","title":"read_string"},{"location":"protobuf-ProtoReader/#returns_20","text":"String iso^ ?","title":"Returns"},{"location":"protobuf-ProtoReader/#read_raw_delimited_length","text":"[Source] fun ref read_raw_delimited_length() : USize val ?","title":"read_raw_delimited_length"},{"location":"protobuf-ProtoReader/#returns_21","text":"USize val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#skip_field","text":"[Source] fun ref skip_field( field_tag: (VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val)) : None val ?","title":"skip_field"},{"location":"protobuf-ProtoReader/#parameters_6","text":"field_tag: ( VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val)","title":"Parameters"},{"location":"protobuf-ProtoReader/#returns_22","text":"None val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#skip_raw","text":"[Source] fun ref skip_raw( to_skip: USize val) : None val ?","title":"skip_raw"},{"location":"protobuf-ProtoReader/#parameters_7","text":"to_skip: USize val","title":"Parameters"},{"location":"protobuf-ProtoReader/#returns_23","text":"None val ?","title":"Returns"},{"location":"protobuf-ProtoReader/#append","text":"[Source] fun ref append( data: (String val | Array[U8 val] val)) : None val","title":"append"},{"location":"protobuf-ProtoReader/#parameters_8","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"protobuf-ProtoReader/#returns_24","text":"None val","title":"Returns"},{"location":"protobuf-ProtoWriter/","text":"ProtoWriter \u00b6 [Source] class ref ProtoWriter Constructors \u00b6 create \u00b6 [Source] new ref create() : ProtoWriter ref^ Returns \u00b6 ProtoWriter ref^ Public Functions \u00b6 write_tag \u00b6 [Source] fun ref write_tag( field: U64 val, field_tag: (VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val)) : None val Parameters \u00b6 field: U64 val field_tag: ( VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val) Returns \u00b6 None val write_enum \u00b6 [Source] fun ref write_enum( n: ProtoEnumValue val) : None val Parameters \u00b6 n: ProtoEnumValue val Returns \u00b6 None val write_varint[T: ( I32 val | I64 val | U32 val | U64 val | Bool val)] \u00b6 [Source] fun ref write_varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]( n: T) : None val Parameters \u00b6 n: T Returns \u00b6 None val write_varint_zigzag[T: ( I32 val | I64 val)] \u00b6 [Source] fun ref write_varint_zigzag[T: (I32 val | I64 val)]( n: T) : None val Parameters \u00b6 n: T Returns \u00b6 None val write_packed_varint[T: ( I32 val | I64 val | U32 val | U64 val | Bool val)] \u00b6 [Source] fun ref write_packed_varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]( from: Array[T] box, from_size: U32 val) : None val Parameters \u00b6 from: Array [T] box from_size: U32 val Returns \u00b6 None val write_packed_varint_zigzag[T: ( I32 val | I64 val)] \u00b6 [Source] fun ref write_packed_varint_zigzag[T: (I32 val | I64 val)]( from: Array[T] box, from_size: U32 val) : None val Parameters \u00b6 from: Array [T] box from_size: U32 val Returns \u00b6 None val write_packed_fixed32[T: ( U32 val | I32 val | F32 val)] \u00b6 [Source] fun ref write_packed_fixed32[T: (U32 val | I32 val | F32 val)]( from: Array[T] box) : None val Parameters \u00b6 from: Array [T] box Returns \u00b6 None val write_packed_fixed64[T: ( U64 val | I64 val | F64 val)] \u00b6 [Source] fun ref write_packed_fixed64[T: (U64 val | I64 val | F64 val)]( from: Array[T] box) : None val Parameters \u00b6 from: Array [T] box Returns \u00b6 None val write_packed_enum[T: ProtoEnumValue val] \u00b6 [Source] fun ref write_packed_enum[T: ProtoEnumValue val]( from: Array[T] box, from_size: U32 val) : None val Parameters \u00b6 from: Array [T] box from_size: U32 val Returns \u00b6 None val write_fixed_32[T: ( U32 val | I32 val | F32 val)] \u00b6 [Source] fun ref write_fixed_32[T: (U32 val | I32 val | F32 val)]( n: T) : None val Parameters \u00b6 n: T Returns \u00b6 None val write_fixed_64[T: ( U64 val | I64 val | F64 val)] \u00b6 [Source] fun ref write_fixed_64[T: (U64 val | I64 val | F64 val)]( n: T) : None val Parameters \u00b6 n: T Returns \u00b6 None val write_bytes \u00b6 [Source] fun ref write_bytes( data: (String val | Array[U8 val] box)) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] box) Returns \u00b6 None val done \u00b6 [Source] fun ref done() : Array[(String val | Array[U8 val] val)] iso^ Returns \u00b6 Array [( String val | Array [ U8 val] val)] iso^ done_array \u00b6 [Source] fun ref done_array() : Array[U8 val] iso^ Returns \u00b6 Array [ U8 val] iso^","title":"class ProtoWriter"},{"location":"protobuf-ProtoWriter/#protowriter","text":"[Source] class ref ProtoWriter","title":"ProtoWriter"},{"location":"protobuf-ProtoWriter/#constructors","text":"","title":"Constructors"},{"location":"protobuf-ProtoWriter/#create","text":"[Source] new ref create() : ProtoWriter ref^","title":"create"},{"location":"protobuf-ProtoWriter/#returns","text":"ProtoWriter ref^","title":"Returns"},{"location":"protobuf-ProtoWriter/#public-functions","text":"","title":"Public Functions"},{"location":"protobuf-ProtoWriter/#write_tag","text":"[Source] fun ref write_tag( field: U64 val, field_tag: (VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val)) : None val","title":"write_tag"},{"location":"protobuf-ProtoWriter/#parameters","text":"field: U64 val field_tag: ( VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val)","title":"Parameters"},{"location":"protobuf-ProtoWriter/#returns_1","text":"None val","title":"Returns"},{"location":"protobuf-ProtoWriter/#write_enum","text":"[Source] fun ref write_enum( n: ProtoEnumValue val) : None val","title":"write_enum"},{"location":"protobuf-ProtoWriter/#parameters_1","text":"n: ProtoEnumValue val","title":"Parameters"},{"location":"protobuf-ProtoWriter/#returns_2","text":"None val","title":"Returns"},{"location":"protobuf-ProtoWriter/#write_varintt-i32-val-i64-val-u32-val-u64-val-bool-val","text":"[Source] fun ref write_varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]( n: T) : None val","title":"write_varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]"},{"location":"protobuf-ProtoWriter/#parameters_2","text":"n: T","title":"Parameters"},{"location":"protobuf-ProtoWriter/#returns_3","text":"None val","title":"Returns"},{"location":"protobuf-ProtoWriter/#write_varint_zigzagt-i32-val-i64-val","text":"[Source] fun ref write_varint_zigzag[T: (I32 val | I64 val)]( n: T) : None val","title":"write_varint_zigzag[T: (I32 val | I64 val)]"},{"location":"protobuf-ProtoWriter/#parameters_3","text":"n: T","title":"Parameters"},{"location":"protobuf-ProtoWriter/#returns_4","text":"None val","title":"Returns"},{"location":"protobuf-ProtoWriter/#write_packed_varintt-i32-val-i64-val-u32-val-u64-val-bool-val","text":"[Source] fun ref write_packed_varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]( from: Array[T] box, from_size: U32 val) : None val","title":"write_packed_varint[T: (I32 val | I64 val | U32 val | U64 val | Bool val)]"},{"location":"protobuf-ProtoWriter/#parameters_4","text":"from: Array [T] box from_size: U32 val","title":"Parameters"},{"location":"protobuf-ProtoWriter/#returns_5","text":"None val","title":"Returns"},{"location":"protobuf-ProtoWriter/#write_packed_varint_zigzagt-i32-val-i64-val","text":"[Source] fun ref write_packed_varint_zigzag[T: (I32 val | I64 val)]( from: Array[T] box, from_size: U32 val) : None val","title":"write_packed_varint_zigzag[T: (I32 val | I64 val)]"},{"location":"protobuf-ProtoWriter/#parameters_5","text":"from: Array [T] box from_size: U32 val","title":"Parameters"},{"location":"protobuf-ProtoWriter/#returns_6","text":"None val","title":"Returns"},{"location":"protobuf-ProtoWriter/#write_packed_fixed32t-u32-val-i32-val-f32-val","text":"[Source] fun ref write_packed_fixed32[T: (U32 val | I32 val | F32 val)]( from: Array[T] box) : None val","title":"write_packed_fixed32[T: (U32 val | I32 val | F32 val)]"},{"location":"protobuf-ProtoWriter/#parameters_6","text":"from: Array [T] box","title":"Parameters"},{"location":"protobuf-ProtoWriter/#returns_7","text":"None val","title":"Returns"},{"location":"protobuf-ProtoWriter/#write_packed_fixed64t-u64-val-i64-val-f64-val","text":"[Source] fun ref write_packed_fixed64[T: (U64 val | I64 val | F64 val)]( from: Array[T] box) : None val","title":"write_packed_fixed64[T: (U64 val | I64 val | F64 val)]"},{"location":"protobuf-ProtoWriter/#parameters_7","text":"from: Array [T] box","title":"Parameters"},{"location":"protobuf-ProtoWriter/#returns_8","text":"None val","title":"Returns"},{"location":"protobuf-ProtoWriter/#write_packed_enumt-protoenumvalue-val","text":"[Source] fun ref write_packed_enum[T: ProtoEnumValue val]( from: Array[T] box, from_size: U32 val) : None val","title":"write_packed_enum[T: ProtoEnumValue val]"},{"location":"protobuf-ProtoWriter/#parameters_8","text":"from: Array [T] box from_size: U32 val","title":"Parameters"},{"location":"protobuf-ProtoWriter/#returns_9","text":"None val","title":"Returns"},{"location":"protobuf-ProtoWriter/#write_fixed_32t-u32-val-i32-val-f32-val","text":"[Source] fun ref write_fixed_32[T: (U32 val | I32 val | F32 val)]( n: T) : None val","title":"write_fixed_32[T: (U32 val | I32 val | F32 val)]"},{"location":"protobuf-ProtoWriter/#parameters_9","text":"n: T","title":"Parameters"},{"location":"protobuf-ProtoWriter/#returns_10","text":"None val","title":"Returns"},{"location":"protobuf-ProtoWriter/#write_fixed_64t-u64-val-i64-val-f64-val","text":"[Source] fun ref write_fixed_64[T: (U64 val | I64 val | F64 val)]( n: T) : None val","title":"write_fixed_64[T: (U64 val | I64 val | F64 val)]"},{"location":"protobuf-ProtoWriter/#parameters_10","text":"n: T","title":"Parameters"},{"location":"protobuf-ProtoWriter/#returns_11","text":"None val","title":"Returns"},{"location":"protobuf-ProtoWriter/#write_bytes","text":"[Source] fun ref write_bytes( data: (String val | Array[U8 val] box)) : None val","title":"write_bytes"},{"location":"protobuf-ProtoWriter/#parameters_11","text":"data: ( String val | Array [ U8 val] box)","title":"Parameters"},{"location":"protobuf-ProtoWriter/#returns_12","text":"None val","title":"Returns"},{"location":"protobuf-ProtoWriter/#done","text":"[Source] fun ref done() : Array[(String val | Array[U8 val] val)] iso^","title":"done"},{"location":"protobuf-ProtoWriter/#returns_13","text":"Array [( String val | Array [ U8 val] val)] iso^","title":"Returns"},{"location":"protobuf-ProtoWriter/#done_array","text":"[Source] fun ref done_array() : Array[U8 val] iso^","title":"done_array"},{"location":"protobuf-ProtoWriter/#returns_14","text":"Array [ U8 val] iso^","title":"Returns"},{"location":"protobuf-TagKind/","text":"TagKind \u00b6 [Source] type TagKind is (VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val) Type Alias For \u00b6 ( VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val)","title":"type TagKind"},{"location":"protobuf-TagKind/#tagkind","text":"[Source] type TagKind is (VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val)","title":"TagKind"},{"location":"protobuf-TagKind/#type-alias-for","text":"( VarintField val | Fixed32Field val | Fixed64Field val | DelimitedField val)","title":"Type Alias For"},{"location":"protobuf-VarintField/","text":"VarintField \u00b6 [Source] primitive val VarintField Constructors \u00b6 create \u00b6 [Source] new val create() : VarintField val^ Returns \u00b6 VarintField val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: VarintField val) : Bool val Parameters \u00b6 that: VarintField val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: VarintField val) : Bool val Parameters \u00b6 that: VarintField val Returns \u00b6 Bool val","title":"primitive VarintField"},{"location":"protobuf-VarintField/#varintfield","text":"[Source] primitive val VarintField","title":"VarintField"},{"location":"protobuf-VarintField/#constructors","text":"","title":"Constructors"},{"location":"protobuf-VarintField/#create","text":"[Source] new val create() : VarintField val^","title":"create"},{"location":"protobuf-VarintField/#returns","text":"VarintField val^","title":"Returns"},{"location":"protobuf-VarintField/#public-functions","text":"","title":"Public Functions"},{"location":"protobuf-VarintField/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"protobuf-VarintField/#returns_1","text":"String val","title":"Returns"},{"location":"protobuf-VarintField/#eq","text":"[Source] fun box eq( that: VarintField val) : Bool val","title":"eq"},{"location":"protobuf-VarintField/#parameters","text":"that: VarintField val","title":"Parameters"},{"location":"protobuf-VarintField/#returns_2","text":"Bool val","title":"Returns"},{"location":"protobuf-VarintField/#ne","text":"[Source] fun box ne( that: VarintField val) : Bool val","title":"ne"},{"location":"protobuf-VarintField/#parameters_1","text":"that: VarintField val","title":"Parameters"},{"location":"protobuf-VarintField/#returns_3","text":"Bool val","title":"Returns"},{"location":"protobuf-ZigZag/","text":"ZigZag \u00b6 [Source] primitive val ZigZag Constructors \u00b6 create \u00b6 [Source] new val create() : ZigZag val^ Returns \u00b6 ZigZag val^ Public Functions \u00b6 encode_32 \u00b6 [Source] fun box encode_32( n: I32 val) : U32 val Parameters \u00b6 n: I32 val Returns \u00b6 U32 val encode_64 \u00b6 [Source] fun box encode_64( n: I64 val) : U64 val Parameters \u00b6 n: I64 val Returns \u00b6 U64 val decode_32 \u00b6 [Source] fun box decode_32( n: U32 val) : I32 val Parameters \u00b6 n: U32 val Returns \u00b6 I32 val decode_64 \u00b6 [Source] fun box decode_64( n: U64 val) : I64 val Parameters \u00b6 n: U64 val Returns \u00b6 I64 val eq \u00b6 [Source] fun box eq( that: ZigZag val) : Bool val Parameters \u00b6 that: ZigZag val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ZigZag val) : Bool val Parameters \u00b6 that: ZigZag val Returns \u00b6 Bool val","title":"primitive ZigZag"},{"location":"protobuf-ZigZag/#zigzag","text":"[Source] primitive val ZigZag","title":"ZigZag"},{"location":"protobuf-ZigZag/#constructors","text":"","title":"Constructors"},{"location":"protobuf-ZigZag/#create","text":"[Source] new val create() : ZigZag val^","title":"create"},{"location":"protobuf-ZigZag/#returns","text":"ZigZag val^","title":"Returns"},{"location":"protobuf-ZigZag/#public-functions","text":"","title":"Public Functions"},{"location":"protobuf-ZigZag/#encode_32","text":"[Source] fun box encode_32( n: I32 val) : U32 val","title":"encode_32"},{"location":"protobuf-ZigZag/#parameters","text":"n: I32 val","title":"Parameters"},{"location":"protobuf-ZigZag/#returns_1","text":"U32 val","title":"Returns"},{"location":"protobuf-ZigZag/#encode_64","text":"[Source] fun box encode_64( n: I64 val) : U64 val","title":"encode_64"},{"location":"protobuf-ZigZag/#parameters_1","text":"n: I64 val","title":"Parameters"},{"location":"protobuf-ZigZag/#returns_2","text":"U64 val","title":"Returns"},{"location":"protobuf-ZigZag/#decode_32","text":"[Source] fun box decode_32( n: U32 val) : I32 val","title":"decode_32"},{"location":"protobuf-ZigZag/#parameters_2","text":"n: U32 val","title":"Parameters"},{"location":"protobuf-ZigZag/#returns_3","text":"I32 val","title":"Returns"},{"location":"protobuf-ZigZag/#decode_64","text":"[Source] fun box decode_64( n: U64 val) : I64 val","title":"decode_64"},{"location":"protobuf-ZigZag/#parameters_3","text":"n: U64 val","title":"Parameters"},{"location":"protobuf-ZigZag/#returns_4","text":"I64 val","title":"Returns"},{"location":"protobuf-ZigZag/#eq","text":"[Source] fun box eq( that: ZigZag val) : Bool val","title":"eq"},{"location":"protobuf-ZigZag/#parameters_4","text":"that: ZigZag val","title":"Parameters"},{"location":"protobuf-ZigZag/#returns_5","text":"Bool val","title":"Returns"},{"location":"protobuf-ZigZag/#ne","text":"[Source] fun box ne( that: ZigZag val) : Bool val","title":"ne"},{"location":"protobuf-ZigZag/#parameters_5","text":"that: ZigZag val","title":"Parameters"},{"location":"protobuf-ZigZag/#returns_6","text":"Bool val","title":"Returns"},{"location":"src/protobuf/field_tags/","text":"primitive VarintField fun string(): String val => \"VarintField\" primitive Fixed32Field fun string(): String val => \"Fixed32Field\" primitive Fixed64Field fun string(): String val => \"Fixed64Field\" primitive DelimitedField fun string(): String val => \"DelimitedField\" type TagKind is (VarintField | Fixed32Field | Fixed64Field | DelimitedField) primitive _TagUtil fun to_num(t: TagKind): U64 => match t | VarintField => 0 | Fixed64Field => 1 | DelimitedField => 2 | Fixed32Field => 5 end fun from_num(n: U64): TagKind ? => match n | 0 => VarintField | 1 => Fixed64Field | 2 => DelimitedField | 5 => Fixed32Field else error end primitive FieldSize fun varint [T: (I32 | I64 | U32 | U64 | Bool)] (field: U64, n: T) : U32 => let field_size = iftype T <: Bool then raw_varint(if (n and true) then 1 else 0 end) elseif T <: I32 then raw_varint(U64.from[I32](n)) elseif T <: I64 then raw_varint(U64.from[I64](n)) elseif T <: U32 then raw_varint(U64.from[U32](n)) elseif T <: U64 then raw_varint(n) else 0 // Can't happen, but Pony doesn't know end _tag_size(field) + field_size fun varint_zigzag [T: (I32 | I64)] (field: U64, n: T) : U32 => let field_size = iftype T <: I32 then raw_varint(ZigZag.encode_32(n).u64()) elseif T <: I64 then raw_varint(ZigZag.encode_64(n)) else 0 // Can't happen, but Pony doesn't know end _tag_size(field) + field_size fun enum(field: U64, enum_field: ProtoEnumValue): U32 => _tag_size(field) + raw_varint(enum_field.as_i32().u64()) fun fixed32(field: U64): U32 => _tag_size(field) + 4 fun fixed64(field: U64): U32 => _tag_size(field) + 8 fun delimited(field: U64, bytes: (String box | Array[U8] box)): U32 => _tag_size(field) + raw_varint(bytes.size().u64()) + bytes.size().u32() fun inner_message(field: U64, n: ProtoMessage box): U32 => let len = n.compute_size() _tag_size(field) + raw_varint(len.u64()) + len fun packed_varint [T: (I32 | I64 | U32 | U64 | Bool)] (field: U64, arg: Array[T] box) : U32 => if arg.size() == 0 then 0 else var data_size: U32 = 0 for v in arg.values() do iftype T <: Bool then data_size = data_size + raw_varint(if (v and true) then 1 else 0 end) elseif T <: I32 then data_size = data_size + raw_varint(v.u64()) elseif T <: I64 then data_size = data_size + raw_varint(v.u64()) elseif T <: U32 then data_size = data_size + raw_varint(v.u64()) elseif T <: U64 then data_size = data_size + raw_varint(v) end end _tag_size(field) + raw_varint(data_size.u64()) + data_size end fun packed_varint_zigzag [T: (I32 | I64)] (field: U64, arg: Array[T] box) : U32 => if arg.size() == 0 then 0 else var data_size: U32 = 0 for v in arg.values() do iftype T <: I32 then data_size = data_size + raw_varint(ZigZag.encode_32(v).u64()) elseif T <: I64 then data_size = data_size + raw_varint(ZigZag.encode_64(v)) end end _tag_size(field) + raw_varint(data_size.u64()) + data_size end fun packed_fixed32 [T: (I32 | U32 | F32)] (field: U64, arg: Array[T] box) : U32 => let array_size = arg.size() if array_size == 0 then 0 else let data_size: USize = 4 * array_size _tag_size(field) + raw_varint(data_size.u64()) + data_size.u32() end fun packed_fixed64 [T: (I64 | U64 | F64)] (field: U64, arg: Array[T] box) : U32 => let array_size = arg.size() if array_size == 0 then 0 else let data_size: USize = 8 * array_size _tag_size(field) + raw_varint(data_size.u64()) + data_size.u32() end fun packed_enum [T: ProtoEnumValue val] (field: U64, arg: Array[T] box) : U32 => if arg.size() == 0 then 0 else var data_size: U32 = 0 for v in arg.values() do data_size = data_size + raw_varint(v.as_i32().u64()) end _tag_size(field) + raw_varint(data_size.u64()) + data_size end fun packed_enum_size(field: U64, arg: Array[ProtoEnumValue] box): U32 => if arg.size() == 0 then 0 else var data_size: U32 = 0 for v in arg.values() do data_size = data_size + raw_varint(v.as_i32().u64()) end _tag_size(field) + raw_varint(data_size.u64()) + data_size end fun _tag_size(field: U64): U32 => raw_varint((field << 3)) // From // https://github.com/stepancheg/rust-protobuf/blob/bbe35a98e196c4dea67dd23ac93c0a66ca11b903/protobuf/src/rt.rs#L39 fun raw_varint(v: U64): U32 => let cnt: U64 = 0xffffffffffffffff if (v and (cnt << 7)) == 0 then return 1 end if (v and (cnt << 14)) == 0 then return 2 end if (v and (cnt << 21)) == 0 then return 3 end if (v and (cnt << 28)) == 0 then return 4 end if (v and (cnt << 35)) == 0 then return 5 end if (v and (cnt << 42)) == 0 then return 6 end if (v and (cnt << 49)) == 0 then return 7 end if (v and (cnt << 56)) == 0 then return 8 end if (v and (cnt << 63)) == 0 then return 9 end 10","title":"Field tags"},{"location":"src/protobuf/proto_message/","text":"use \"buffered\" trait ProtoMessage fun is_initialized(): Bool => true fun compute_size(): U32 => 0 fun write_to_stream(writer: ProtoWriter) => None fun ref parse_from_stream(reader: ProtoReader) ? => reader.skip_raw(reader.size())? trait val ProtoEnumValue fun as_i32(): I32 trait val ProtoEnum fun from_i32(value: I32): (ProtoEnumValue | None)","title":"Proto message"},{"location":"src/protobuf/proto_reader/","text":"use \"buffered\" class ProtoReader embed _reader: Reader = Reader new ref create() => None fun size(): USize => _reader.size() fun ref pop_embed(): ProtoReader ? => // TODO(borja): Avoid copying here // \"Reader.block\" copies contents into an array, // but we could track offsets ourselves and avoid // any copies, similar to what rust-protobuf does. // Reader needs to copy since it might not have // all its contents into contiguous memory, but // for our cases, it might be possible to receive // everything at once in the constructor? block(read_raw_delimited_length()?)? fun ref block(slice_size: USize): ProtoReader ? => ProtoReader.>append(_reader.block(slice_size)?) fun ref read_field_tag(): (U64, TagKind) ? => let raw = read_varint_64()? (raw >> 3, _TagUtil.from_num(raw and 7)?) fun ref read_varint_bool(): Bool ? => _raw_varint_32()? == 1 fun ref read_varint_32(): U32 ? => _raw_varint_32()? fun ref read_varint_64(): U64 ? => _raw_varint_64()? fun ref read_varint_zigzag_32(): I32 ? => ZigZag.decode_32(_raw_varint_32()?) fun ref read_varint_zigzag_64(): I64 ? => ZigZag.decode_64(_raw_varint_64()?) fun ref read_fixed_32_integer(): U32 ? => _reader.u32_le()? fun ref read_fixed_32_float(): F32 ? => _reader.f32_le()? fun ref read_fixed_64_integer(): U64 ? => _reader.u64_le()? fun ref read_fixed_64_float(): F64 ? => _reader.f64_le()? fun ref read_packed_varint [T: (I32 | I64 | U32 | U64 | Bool)] (into: Array[T]) ? => let packed_size = read_raw_delimited_length()? let target_size = size() - packed_size into.reserve(into.size() + packed_size) while size() > target_size do iftype T <: Bool then into.push(if read_varint_32()? == 1 then true else false end) elseif T <: I32 then into.push(read_varint_32()?.i32()) elseif T <: U32 then into.push(read_varint_32()?) elseif T <: I64 then into.push(read_varint_64()?.i64()) elseif T <: U64 then into.push(read_varint_64()?) end end fun ref read_packed_varint_zigzag [T: (I32 | I64)] (into: Array[T]) ? => let packed_size = read_raw_delimited_length()? let target_size = size() - packed_size into.reserve(into.size() + packed_size) while size() > target_size do iftype T <: I32 then into.push(ZigZag.decode_32(read_varint_32()?)) elseif T <: I64 then into.push(ZigZag.decode_64(read_varint_64()?)) end end fun ref read_packed_fixed_32 [T: (U32 | I32 | F32)] (into: Array[T]) ? => let packed_size = read_raw_delimited_length()? let target_size = size() - packed_size into.reserve(into.size() + packed_size) while size() > target_size do iftype T <: U32 then into.push(read_fixed_32_integer()?) elseif T <: I32 then into.push(read_fixed_32_integer()?.i32()) elseif T <: F32 then into.push(read_fixed_32_float()?) end end fun ref read_packed_fixed_64 [T: (U64 | I64 | F64)] (into: Array[T]) ? => let packed_size = read_raw_delimited_length()? let target_size = size() - packed_size into.reserve(into.size() + packed_size) while size() > target_size do iftype T <: U64 then into.push(read_fixed_64_integer()?) elseif T <: I64 then into.push(read_fixed_64_integer()?.i64()) elseif T <: F64 then into.push(read_fixed_64_float()?) end end fun ref read_packed_enum [T: ProtoEnumValue val] (into: Array[T], builder: ProtoEnum) ? => let packed_size = read_raw_delimited_length()? let target_size = size() - packed_size into.reserve(into.size() + packed_size) while size() > target_size do try match builder.from_i32(read_varint_32()?.i32()) | None => None | let field: T => iftype T <: ProtoEnumValue then into.push(field) end end end end fun ref read_bytes(): Array[U8] iso^ ? => let size' = read_raw_delimited_length()? _reader.block(size')? fun ref read_string(): String iso^ ? => String.from_iso_array(read_bytes()?) fun ref read_raw_delimited_length(): USize ? => USize.from[U64](read_varint_64()?) fun ref skip_field(field_tag: TagKind) ? => match field_tag | VarintField => _skip_varint() ? | Fixed32Field => _reader.skip(4) ? | Fixed64Field => _reader.skip(8) ? | DelimitedField => _skip_delimited() ? end fun ref _skip_varint() ? => while (_reader.u8()? and 0x80) != 0 do continue end fun ref _skip_delimited() ? => let size' = read_raw_delimited_length()? _reader.skip(size'.usize())? fun ref skip_raw(to_skip: USize) ? => _reader.skip(to_skip)? fun ref append(data: ByteSeq) => _reader.append(data) fun ref _raw_varint_32(): U32 ? => // TODO(borja): Optimize varint if we move to a raw array _raw_varint_64()?.u32() fun ref _raw_varint_64(): U64 ? => var b: U64 = 0 var acc: U64 = 0 var shift: U64 = 0 while true do b = _reader.u8()?.u64() acc = acc or ((b and 0x7f) << shift) shift = shift + 7 if (((b and 0x80) == 0) or (shift > 63)) then break end end acc // Doesn't work due to type-checker being too finicky // fun ref read_varint[T: (I32 | I64 | U32 | U64 | Bool)](): T ? => // iftype T <: Bool then // (_raw_varint_32()? == 1) // elseif T <: I32 then // _raw_varint_32()?.i32() // elseif T <: U32 then // _raw_varint_32()? // elseif T <: I64 then // _raw_varint_64()?.i64() // else // _raw_varint_64()? // end // fun ref read_varint_zigzag[T: (I32 | I64)](): T ? => // iftype T <: I32 then // ZigZag.decode_32(read_varint[U32]()?) // else // ZigZag.decode_64(read_varint[U64]()?) // end // fun ref read_fixed_32[T: (U32 | I32 | F32)](): T ? => // iftype T <: U32 then // _reader.u32_le()? // elseif T <: I32 then // _reader.i32_le()? // else // _reader.f32_le()? // end // fun ref read_fixed_64[T: (U64 | I64 | F64)](): T ? => // iftype T <: U64 then // _reader.u64_le()? // elseif T <: I64 then // _reader.i64_le()? // else // _reader.f64_le()? // end","title":"Proto reader"},{"location":"src/protobuf/proto_writer/","text":"use \"buffered\" class ProtoWriter embed _writer: Writer = Writer new ref create() => None fun ref write_tag(field: U64, field_tag: TagKind) => _write_raw_varint((field << 3) or _TagUtil.to_num(field_tag)) fun ref write_enum(n: ProtoEnumValue) => write_varint[I32](n.as_i32()) fun ref write_varint [T: (I32 | I64 | U32 | U64 | Bool)] (n: T) => iftype T <: Bool then _write_raw_varint( if (n and true) then U64(1) else U64(0) end ) elseif T <: I32 then _write_raw_varint(n.u64()) elseif T <: U32 then _write_raw_varint(n.u64()) elseif T <: I64 then _write_raw_varint(n.u64()) elseif T <: U64 then _write_raw_varint(n) end fun ref write_varint_zigzag [T: (I32 | I64)] (n: T) => iftype T <: I32 then _write_raw_varint(ZigZag.encode_32(n).u64()) elseif T <: I64 then _write_raw_varint(ZigZag.encode_64(n)) end fun ref write_packed_varint [T: (I32 | I64 | U32 | U64 | Bool)] (from: Array[T] box, from_size: U32) => write_varint[U32](from_size) for v in from.values() do write_varint[T](v) end fun ref write_packed_varint_zigzag [T: (I32 | I64)] (from: Array[T] box, from_size: U32) => write_varint[U32](from_size) for v in from.values() do write_varint_zigzag[T](v) end fun ref write_packed_fixed32 [T: (U32 | I32 | F32)] (from: Array[T] box) => write_varint[U32]((from.size() * 4).u32()) for v in from.values() do write_fixed_32[T](v) end fun ref write_packed_fixed64 [T: (U64 | I64 | F64)] (from: Array[T] box) => write_varint[U32]((from.size() * 8).u32()) for v in from.values() do write_fixed_64[T](v) end fun ref write_packed_enum [T: ProtoEnumValue val] (from: Array[T] box, from_size: U32) => write_varint[U32](from_size) for v in from.values() do write_varint[I32](v.as_i32()) end fun ref _write_raw_varint(n: U64) => var n' = n while n' >= 0x80 do _writer.u8((0x80 or n'.u8())) n' = n' >> 7 end _writer.u8(n'.u8()) fun ref write_fixed_32[T: (U32 | I32 | F32)](n: T) => iftype T <: U32 then _writer.u32_le(n) elseif T <: I32 then _writer.i32_le(n) elseif T <: F32 then _writer.f32_le(n) end fun ref write_fixed_64[T: (U64 | I64 | F64)](n: T) => iftype T <: U64 then _writer.u64_le(n) elseif T <: I64 then _writer.i64_le(n) elseif T <: F64 then _writer.f64_le(n) end fun ref write_bytes(data: (String | Array[U8] box)) => _write_raw_varint(data.size().u64()) let data_val = match data | let string: String => string | let array: Array[U8] box => // FIXME(borja): Try to avoid copying here let tmp = recover Array[U8].create(array.size()) end for elt in array.values() do tmp.push(elt) end consume val tmp end _writer.write(data_val) fun ref done(): Array[ByteSeq] iso^ => _writer.done() fun ref done_array(): Array[U8] iso^ => let b = done() let s = recover Array[U8](b.size()) end for elt in (consume b).values() do s.append(elt) end consume s","title":"Proto writer"},{"location":"src/protobuf/zigzag/","text":"primitive ZigZag fun encode_32(n: I32): U32 => ((n << 1) xor (n >> 31)).u32() fun encode_64(n: I64): U64 => ((n << 1) xor (n >> 63)).u64() fun decode_32(n: U32): I32 => ((n >> 1) xor (n and 1).neg()).i32() fun decode_64(n: U64): I64 => ((n >> 1) xor (n and 1).neg()).i64()","title":"Zigzag"}]}