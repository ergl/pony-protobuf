use "format"
use "../../protobuf"

actor Main
  new create(env: Env) =>
    let messages = [
      _SampleBytes~with_field_a()
      _SampleBytes~with_field_b()
      _SampleBytes~with_name()
      _SampleBytes~with_sub_message()
    ]
    var idx: USize = 0
    for method in messages.values() do
      test_message(env.out, idx, method.apply())
      idx = idx + 1
    end
  
  fun test_message(out: OutStream, idx: USize, b0: Array[U8] val) =>
    try
      let msg0 = SampleMessage.>parse_from_stream(ProtoReader .> append(b0))?
      walk_message(out, msg0)
      let w0 = ProtoWriter
      msg0.write_to_stream(w0)
      let b1 = recover let tmp = w0.done_array(); consume val tmp end
      let msg1 = SampleMessage.>parse_from_stream(ProtoReader .> append(b1))?
      walk_message(out, msg1)
      out.print("Deterministic? " +
        array_eq(b0, consume b1).string())
    else
      out.print("Couldn't parse bytes for msg " + idx.string())
    end

  fun array_eq(l: Array[U8] val, r: Array[U8] val): Bool =>
    if l.size() != r.size() then return false end
    for (idx, v) in l.pairs() do
      try
        if v != r(idx)? then
          return false
        end
      else
        return false
      end
    end
    true

  fun walk_message(out: OutStream, msg: SampleMessage) =>
    let descr = recover String .> append("SampleMessage{test_oneof=") end
    match msg.test_oneof
    | None => descr.append("None")
    | (SampleMessageFieldAField, let num: I32) =>
      descr.append("{a_field, " + num.string() + "}")
    | (SampleMessageFieldBField, let num: I32) =>
      descr.append("{b_field, " + num.string() + "}")
    | (SampleMessageNameField, let name: String) => 
      descr.append("{b_field, \"" + name + "\"}")
    | (SampleMessageSubMessageField, let message: SubMessage box) =>
      descr.append("{sub_message, SubMessage{a=")
      match message.a
      | None => descr.append("None")
      | let num: I32 => descr.append(num.string())
      end
      descr.append(", b=")
      match message.b
      | None => descr.append("None")
      | let num: I32 => descr.append(num.string())
      end
      descr.append("}")
    end
    descr.append("}")
    out.print(consume descr)

primitive _SampleBytes
  """
  A collection of messages generated by gpb_compile version 4.12.0 (erlang).
  """

  fun with_field_a(): Array[U8] val =>
    """
    ```erlang
    #{
      test_oneof => {field_a, -10}
    }
    ```
    """
    [8;246;255;255;255;255;255;255;255;255;1]

  fun with_field_b(): Array[U8] val =>
    """
    ```erlang
    #{
      test_oneof => {field_b, -10}
    }
    ```
    """
    [16;246;255;255;255;255;255;255;255;255;1]

  fun with_name(): Array[U8] val =>
    """
    ```erlang
    #{
      test_oneof => {name, "hello from erlang"}
    }
    ```
    """
    [26;17;104;101;108;108;111;32;102;114;111;109;32;101;114;108;97;110;103]

  fun with_sub_message(): Array[U8] val =>
    """
    ```erlang
    #{
      test_oneof => {sub_message, #{a => 10, b => -10}}
    }
    ```
    """
    [34;13;8;10;16;246;255;255;255;255;255;255;255;255;1]
